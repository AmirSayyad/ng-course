"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by Eyal on 6/1/2016.
 */
var core_1 = require("@angular/core");
exports.logs = [];
var lastComponent;
var lastEvent;
function resetLog() {
    exports.logs.length = 0;
    lastComponent = null;
    lastEvent = null;
}
function logEvent(component, event) {
    if (!lastComponent || lastComponent !== component) {
        exports.logs.push("angular-->" + component + ":'");
    }
    exports.logs.push(component + "->" + component + ":" + lastEvent);
    lastComponent = component;
    lastEvent = event;
}
exports.logEvent = logEvent;
function clearLogs() {
    exports.logs.length = 0;
}
exports.clearLogs = clearLogs;
function getLogs() {
    var log = '';
    exports.logs.forEach(function (l) {
        log += l + "\n";
    });
    return log;
}
var SequenceDiagram = (function () {
    function SequenceDiagram(zone, cd, elmRef, render, app) {
        this.zone = zone;
        this.cd = cd;
        this.elmRef = elmRef;
        this.render = render;
        this.app = app;
        this.elements = {};
    }
    SequenceDiagram.prototype.ngOnInit = function () {
        /*var clear =
        this.elmRef.nativeElement
            .getElementsByClassName('clear');
        this.zone.runOutsideAngular(()=>{
            clear[0]
                .addEventListener('click',()=>{
                    clear[0].value += '!';
                });
        });*/
        var _this = this;
        this.addEventListener('draw', 'click', function () {
            _this.draw();
        });
        this.addEventListener('clear-draw', 'click', function () {
            _this.clearDraw();
        });
        this.addEventListener('clear-logs', 'click', function () {
            _this.clearLogs();
        });
        this.addEventListener('tick', 'click', function () {
            _this.tick();
        });
        this.findElementByClass('diagram');
        this.findElementByClass('logs');
    };
    SequenceDiagram.prototype.ngDoCheck = function () {
        var _this = this;
        if (!this.render)
            return;
        this.render.setElementStyle(this.elmRef.nativeElement, 'border', '2px solid red');
        this.zone.runOutsideAngular(function () {
            setTimeout(function () {
                _this.render.setElementStyle(_this.elmRef.nativeElement, 'border', '0');
            }, 700);
        });
        this.drawLogs();
    };
    SequenceDiagram.prototype.addEventListener = function (className, event, fn) {
        var _this = this;
        this.findElementByClass(className);
        this.zone.runOutsideAngular(function () {
            _this.elements[className].addEventListener(event, fn);
        });
    };
    SequenceDiagram.prototype.findElementByClass = function (className) {
        var results = this.elmRef.nativeElement
            .getElementsByClassName(className);
        if (results.length > 0) {
            this.elements[className] = results[0];
        }
        else {
            debugger;
        }
    };
    SequenceDiagram.prototype.clearDivChildElements = function (div) {
        if (!div)
            return;
        while (div.firstChild) {
            div.removeChild(div.firstChild);
        }
    };
    Object.defineProperty(SequenceDiagram.prototype, "title", {
        set: function (value) {
            if (value != this._log) {
            }
            this._log = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SequenceDiagram.prototype, "logs", {
        get: function () {
            return exports.logs;
        },
        enumerable: true,
        configurable: true
    });
    SequenceDiagram.prototype.clearLogs = function () {
        resetLog();
        var ul = $(this.elements['logs']);
        $('li', ul).remove();
        this.cd.detectChanges();
    };
    SequenceDiagram.prototype.drawLogs = function () {
        var ul = $(this.elements['logs']);
        this.logs.forEach(function (log) {
            ul.append("<li>" + log + "</li>");
        });
    };
    SequenceDiagram.prototype.tick = function () {
        this.app.tick();
    };
    SequenceDiagram.prototype.clearDraw = function (div) {
        div = div || this.elements['diagram'];
        this.clearDivChildElements(div);
    };
    SequenceDiagram.prototype.draw = function () {
        /*logs.forEach(l=>{
            diagram = Diagram.parse(l);
        });*/
        this.diagram = Diagram.parse(getLogs());
        this.diagram.setTitle(this.title);
        this.diagram.drawSVG('diagram');
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], SequenceDiagram.prototype, "title", null);
    SequenceDiagram = __decorate([
        core_1.Component({
            selector: 'diagram',
            styles: [":host{display: block;}"],
            template: "\n<div>\n    <button class=\"draw\">Draw</button>\n    <button class=\"clear-draw\">Clear Draw</button>\n    <button class=\"clear-logs\">Clear {{logs.length}}</button>\n    <button class=\"tick\">Tick</button>\n    \n    <div id=\"diagram\" class=\"diagram\">\n        <div>diagram</div>\n    </div>\n    <ul class=\"logs\">\n        <!--<li *ngFor=\"let log of logs\">{{log}}</li>-->               \n    </ul>\n</div>    \n"
        }), 
        __metadata('design:paramtypes', [core_1.NgZone, core_1.ChangeDetectorRef, core_1.ElementRef, core_1.Renderer, core_1.ApplicationRef])
    ], SequenceDiagram);
    return SequenceDiagram;
}());
exports.SequenceDiagram = SequenceDiagram;
//# sourceMappingURL=SequenceDiagramsService.js.map